define(['dart_sdk', 'packages/web_socket_channel/src/copy/io_sink.dart', 'packages/stream_channel/src/stream_channel_controller.dart', 'packages/async/src/delegate/stream_sink.dart', 'packages/crypto/src/sha1.dart'], (function load__packages__web_socket_channel__src__copy__web_socket_impl_dart(dart_sdk, packages__web_socket_channel__src__copy__io_sink$46dart, packages__stream_channel__src__stream_channel_controller$46dart, packages__async__src__delegate__stream_sink$46dart, packages__crypto__src__sha1$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const math = dart_sdk.math;
  const convert = dart_sdk.convert;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const html = dart_sdk.html;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const io_sink = packages__web_socket_channel__src__copy__io_sink$46dart.src__copy__io_sink;
  const stream_channel_controller = packages__stream_channel__src__stream_channel_controller$46dart.src__stream_channel_controller;
  const stream_channel = packages__stream_channel__src__stream_channel_controller$46dart.stream_channel;
  const stream_sink = packages__async__src__delegate__stream_sink$46dart.src__delegate__stream_sink;
  const sha1 = packages__crypto__src__sha1$46dart.src__sha1;
  var web_socket_impl = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var html$ = Object.create(dart.library);
  var _connect_html = Object.create(dart.library);
  var channel = Object.create(dart.library);
  var web_socket_channel = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $buffer = dartx.buffer;
  var $truncate = dartx.truncate;
  var $isNotEmpty = dartx.isNotEmpty;
  var $sublist = dartx.sublist;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $forEach = dartx.forEach;
  var $rightShift = dartx['>>'];
  var $setRange = dartx.setRange;
  var $remove = dartx.remove;
  var $toString = dartx.toString;
  var $readyState = dartx.readyState;
  var $onOpen = dartx.onOpen;
  var $onError = dartx.onError;
  var $onMessage = dartx.onMessage;
  var $data = dartx.data;
  var $asUint8List = dartx.asUint8List;
  var $onClose = dartx.onClose;
  var $noSuchMethod = dartx.noSuchMethod;
  var $codeUnits = dartx.codeUnits;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    ListOfint: () => (T.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamOfListOfint: () => (T.StreamOfListOfint = dart.constFn(async.Stream$(T.ListOfint())))(),
    EventSinkTo_WebSocketProtocolTransformer: () => (T.EventSinkTo_WebSocketProtocolTransformer = dart.constFn(dart.fnType(web_socket_impl._WebSocketProtocolTransformer, [async.EventSink])))(),
    EventSinkOfListOfint: () => (T.EventSinkOfListOfint = dart.constFn(async.EventSink$(T.ListOfint())))(),
    EventSinkOfListOfintTo_WebSocketOutgoingTransformer: () => (T.EventSinkOfListOfintTo_WebSocketOutgoingTransformer = dart.constFn(dart.fnType(web_socket_impl._WebSocketOutgoingTransformer, [T.EventSinkOfListOfint()])))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    ListOfintTovoid: () => (T.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T.ListOfint()])))(),
    JSArrayOfListOfint: () => (T.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T.ListOfint())))(),
    CompleterOfWebSocketImpl: () => (T.CompleterOfWebSocketImpl = dart.constFn(async.Completer$(web_socket_impl.WebSocketImpl)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    dynamicAndStackTraceToNull: () => (T.dynamicAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.StackTrace])))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    dynamicToWebSocketImpl: () => (T.dynamicToWebSocketImpl = dart.constFn(dart.fnType(web_socket_impl.WebSocketImpl, [dart.dynamic])))(),
    VoidToFuture: () => (T.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    dynamicToFuture: () => (T.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    dynamicAnddynamicToNull: () => (T.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    dynamicToMap: () => (T.dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))(),
    IdentityMapOfint$WebSocketImpl: () => (T.IdentityMapOfint$WebSocketImpl = dart.constFn(_js_helper.IdentityMap$(core.int, web_socket_impl.WebSocketImpl)))(),
    EventToNull: () => (T.EventToNull = dart.constFn(dart.fnType(core.Null, [html.Event])))(),
    MessageEventTovoid: () => (T.MessageEventTovoid = dart.constFn(dart.fnType(dart.void, [html.MessageEvent])))(),
    CloseEventToNull: () => (T.CloseEventToNull = dart.constFn(dart.fnType(core.Null, [html.CloseEvent])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 5000000
      });
    },
    get C1() {
      return C[1] = dart.const(new _js_helper.PrivateSymbol.new('_webSocket', _webSocket$0));
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: html$.BinaryType.prototype,
        [value$]: "blob",
        [name$]: "blob"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: html$.BinaryType.prototype,
        [value$]: "arraybuffer",
        [name$]: "list"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:web_socket_channel/src/copy/web_socket_impl.dart",
    "file:///C:/Developer/flutter/.pub-cache/hosted/pub.dartlang.org/web_socket_channel-2.1.0/lib/src/copy/web_socket_impl.dart",
    "package:web_socket_channel/src/exception.dart",
    "package:web_socket_channel/html.dart",
    "package:web_socket_channel/src/channel.dart"
  ];
  web_socket_impl._WebSocketMessageType = class _WebSocketMessageType extends core.Object {};
  (web_socket_impl._WebSocketMessageType.new = function() {
    ;
  }).prototype = web_socket_impl._WebSocketMessageType.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketMessageType);
  dart.addTypeCaches(web_socket_impl._WebSocketMessageType);
  dart.setLibraryUri(web_socket_impl._WebSocketMessageType, I[0]);
  dart.defineLazy(web_socket_impl._WebSocketMessageType, {
    /*web_socket_impl._WebSocketMessageType.NONE*/get NONE() {
      return 0;
    },
    /*web_socket_impl._WebSocketMessageType.TEXT*/get TEXT() {
      return 1;
    },
    /*web_socket_impl._WebSocketMessageType.BINARY*/get BINARY() {
      return 2;
    }
  }, false);
  web_socket_impl._WebSocketOpcode = class _WebSocketOpcode extends core.Object {};
  (web_socket_impl._WebSocketOpcode.new = function() {
    ;
  }).prototype = web_socket_impl._WebSocketOpcode.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketOpcode);
  dart.addTypeCaches(web_socket_impl._WebSocketOpcode);
  dart.setLibraryUri(web_socket_impl._WebSocketOpcode, I[0]);
  dart.defineLazy(web_socket_impl._WebSocketOpcode, {
    /*web_socket_impl._WebSocketOpcode.CONTINUATION*/get CONTINUATION() {
      return 0;
    },
    /*web_socket_impl._WebSocketOpcode.TEXT*/get TEXT() {
      return 1;
    },
    /*web_socket_impl._WebSocketOpcode.BINARY*/get BINARY() {
      return 2;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_3*/get RESERVED_3() {
      return 3;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_4*/get RESERVED_4() {
      return 4;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_5*/get RESERVED_5() {
      return 5;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_6*/get RESERVED_6() {
      return 6;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_7*/get RESERVED_7() {
      return 7;
    },
    /*web_socket_impl._WebSocketOpcode.CLOSE*/get CLOSE() {
      return 8;
    },
    /*web_socket_impl._WebSocketOpcode.PING*/get PING() {
      return 9;
    },
    /*web_socket_impl._WebSocketOpcode.PONG*/get PONG() {
      return 10;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_B*/get RESERVED_B() {
      return 11;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_C*/get RESERVED_C() {
      return 12;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_D*/get RESERVED_D() {
      return 13;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_E*/get RESERVED_E() {
      return 14;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_F*/get RESERVED_F() {
      return 15;
    }
  }, false);
  var _state = dart.privateName(web_socket_impl, "_state");
  var _fin = dart.privateName(web_socket_impl, "_fin");
  var _opcode = dart.privateName(web_socket_impl, "_opcode");
  var _len = dart.privateName(web_socket_impl, "_len");
  var _masked = dart.privateName(web_socket_impl, "_masked");
  var _remainingLenBytes = dart.privateName(web_socket_impl, "_remainingLenBytes");
  var _remainingMaskingKeyBytes = dart.privateName(web_socket_impl, "_remainingMaskingKeyBytes");
  var _remainingPayloadBytes = dart.privateName(web_socket_impl, "_remainingPayloadBytes");
  var _unmaskingIndex = dart.privateName(web_socket_impl, "_unmaskingIndex");
  var _currentMessageType = dart.privateName(web_socket_impl, "_currentMessageType");
  var _eventSink = dart.privateName(web_socket_impl, "_eventSink");
  var _maskingBytes = dart.privateName(web_socket_impl, "_maskingBytes");
  var _payload = dart.privateName(web_socket_impl, "_payload");
  var _serverSide$ = dart.privateName(web_socket_impl, "_serverSide");
  var _isControlFrame = dart.privateName(web_socket_impl, "_isControlFrame");
  var _lengthDone = dart.privateName(web_socket_impl, "_lengthDone");
  var _maskDone = dart.privateName(web_socket_impl, "_maskDone");
  var _unmask = dart.privateName(web_socket_impl, "_unmask");
  var _controlFrameEnd = dart.privateName(web_socket_impl, "_controlFrameEnd");
  var _messageFrameEnd = dart.privateName(web_socket_impl, "_messageFrameEnd");
  var _startPayload = dart.privateName(web_socket_impl, "_startPayload");
  var _prepareForNextFrame = dart.privateName(web_socket_impl, "_prepareForNextFrame");
  web_socket_impl._WebSocketProtocolTransformer = class _WebSocketProtocolTransformer extends async.StreamTransformerBase$(core.List$(core.int), dart.dynamic) {
    bind(stream) {
      T.StreamOfListOfint().as(stream);
      return async.Stream.eventTransformed(stream, dart.fn(eventSink => {
        if (this[_eventSink] != null) {
          dart.throw(new core.StateError.new("WebSocket transformer already used."));
        }
        this[_eventSink] = eventSink;
        return this;
      }, T.EventSinkTo_WebSocketProtocolTransformer()));
    }
    addError(error, stackTrace = null) {
      dart.nullCheck(this[_eventSink]).addError(error, stackTrace);
    }
    close() {
      dart.nullCheck(this[_eventSink]).close();
    }
    add(bytes) {
      let t0;
      T.ListOfint().as(bytes);
      let buffer = typed_data.Uint8List.is(bytes) ? bytes : _native_typed_data.NativeUint8List.fromList(bytes);
      let index = 0;
      let lastIndex = buffer[$length];
      if (this[_state] === 5) {
        dart.throw(new exception.WebSocketChannelException.new("Data on closed connection"));
      }
      if (this[_state] === 6) {
        dart.throw(new exception.WebSocketChannelException.new("Data on failed connection"));
      }
      while (index < lastIndex && this[_state] !== 5 && this[_state] !== 6) {
        let byte = buffer[$_get](index);
        if (this[_state] <= 2) {
          if (this[_state] === 0) {
            this[_fin] = (byte & 128) !== 0;
            if ((byte & (32 | 16) >>> 0) !== 0) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            this[_opcode] = (byte & 15) >>> 0;
            if (this[_opcode] <= 2) {
              if (this[_opcode] === 0) {
                if (this[_currentMessageType] === 0) {
                  dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
                }
              } else {
                if (!(this[_opcode] === 1 || this[_opcode] === 2)) dart.assertFailed(null, I[1], 152, 22, "_opcode == _WebSocketOpcode.TEXT ||\n                  _opcode == _WebSocketOpcode.BINARY");
                if (this[_currentMessageType] !== 0) {
                  dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
                }
                this[_currentMessageType] = this[_opcode];
              }
            } else if (this[_opcode] >= 8 && this[_opcode] <= 10) {
              if (!this[_fin]) dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            } else {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            this[_state] = 1;
          } else if (this[_state] === 1) {
            this[_masked] = (byte & 128) !== 0;
            this[_len] = byte & 127;
            if (this[_isControlFrame]() && this[_len] > 125) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            if (this[_len] === 126) {
              this[_len] = 0;
              this[_remainingLenBytes] = 2;
              this[_state] = 2;
            } else if (this[_len] === 127) {
              this[_len] = 0;
              this[_remainingLenBytes] = 8;
              this[_state] = 2;
            } else {
              if (!(this[_len] < 126)) dart.assertFailed(null, I[1], 182, 20, "_len < 126");
              this[_lengthDone]();
            }
          } else {
            if (!(this[_state] === 2)) dart.assertFailed(null, I[1], 186, 18, "_state == LEN_REST");
            this[_len] = (this[_len] << 8 | byte) >>> 0;
            this[_remainingLenBytes] = this[_remainingLenBytes] - 1;
            if (this[_remainingLenBytes] === 0) {
              this[_lengthDone]();
            }
          }
        } else {
          if (this[_state] === 3) {
            this[_maskingBytes][$_set](4 - (t0 = this[_remainingMaskingKeyBytes], this[_remainingMaskingKeyBytes] = t0 - 1, t0), byte);
            if (this[_remainingMaskingKeyBytes] === 0) {
              this[_maskDone]();
            }
          } else {
            if (!(this[_state] === 4)) dart.assertFailed(null, I[1], 200, 18, "_state == PAYLOAD");
            let payloadLength = math.min(core.int, lastIndex - index, this[_remainingPayloadBytes]);
            this[_remainingPayloadBytes] = this[_remainingPayloadBytes] - payloadLength;
            if (this[_masked]) {
              this[_unmask](index, payloadLength, buffer);
            }
            this[_payload].add(typed_data.Uint8List.view(buffer[$buffer], index, payloadLength));
            index = index + payloadLength;
            if (this[_isControlFrame]()) {
              if (this[_remainingPayloadBytes] === 0) this[_controlFrameEnd]();
            } else {
              if (this[_currentMessageType] !== 1 && this[_currentMessageType] !== 2) {
                dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
              }
              if (this[_remainingPayloadBytes] === 0) this[_messageFrameEnd]();
            }
            index = index - 1;
          }
        }
        index = index + 1;
      }
    }
    [_unmask](index, length, buffer) {
      let t2, t1, t0, t0$, t2$, t1$, t0$0;
      if (length >= 16) {
        let startOffset = 16 - (index & 15);
        let end = index + startOffset;
        for (let i = index; i < end; i = i + 1) {
          t0 = buffer;
          t1 = i;
          t0[$_set](t1, (t0[$_get](t1) ^ this[_maskingBytes][$_get]((t2 = this[_unmaskingIndex], this[_unmaskingIndex] = t2 + 1, t2) & 3)) >>> 0);
        }
        index = index + startOffset;
        length = length - startOffset;
        let blockCount = (length / 16)[$truncate]();
        if (blockCount > 0) {
          let mask = 0;
          for (let i = 3; i >= 0; i = i - 1) {
            mask = (mask << 8 | this[_maskingBytes][$_get](this[_unmaskingIndex] + i & 3)) >>> 0;
          }
          let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
          let blockBuffer = typed_data.Int32x4List.view(buffer[$buffer], index, blockCount);
          for (let i = 0; i < blockBuffer[$length]; i = i + 1) {
            t0$ = i;
            blockBuffer[$_set](t0$, blockBuffer[$_get](t0$)['^'](blockMask));
          }
          let bytes = blockCount * 16;
          index = index + bytes;
          length = length - bytes;
        }
      }
      let end = index + length;
      for (let i = index; i < end; i = i + 1) {
        t0$0 = buffer;
        t1$ = i;
        t0$0[$_set](t1$, (t0$0[$_get](t1$) ^ this[_maskingBytes][$_get]((t2$ = this[_unmaskingIndex], this[_unmaskingIndex] = t2$ + 1, t2$) & 3)) >>> 0);
      }
    }
    [_lengthDone]() {
      if (this[_masked]) {
        if (!this[_serverSide$]) {
          dart.throw(new exception.WebSocketChannelException.new("Received masked frame from server"));
        }
        this[_state] = 3;
      } else {
        if (this[_serverSide$]) {
          dart.throw(new exception.WebSocketChannelException.new("Received unmasked frame from client"));
        }
        this[_remainingPayloadBytes] = this[_len];
        this[_startPayload]();
      }
    }
    [_maskDone]() {
      this[_remainingPayloadBytes] = this[_len];
      this[_startPayload]();
    }
    [_startPayload]() {
      if (this[_remainingPayloadBytes] === 0) {
        if (this[_isControlFrame]()) {
          switch (this[_opcode]) {
            case 8:
            {
              this[_state] = 5;
              dart.nullCheck(this[_eventSink]).close();
              break;
            }
            case 9:
            {
              dart.nullCheck(this[_eventSink]).add(new web_socket_impl._WebSocketPing.new());
              break;
            }
            case 10:
            {
              dart.nullCheck(this[_eventSink]).add(new web_socket_impl._WebSocketPong.new());
              break;
            }
          }
          this[_prepareForNextFrame]();
        } else {
          this[_messageFrameEnd]();
        }
      } else {
        this[_state] = 4;
      }
    }
    [_messageFrameEnd]() {
      if (this[_fin]) {
        let bytes = this[_payload].takeBytes();
        switch (this[_currentMessageType]) {
          case 1:
          {
            dart.nullCheck(this[_eventSink]).add(convert.utf8.decode(bytes));
            break;
          }
          case 2:
          {
            dart.nullCheck(this[_eventSink]).add(bytes);
            break;
          }
        }
        this[_currentMessageType] = 0;
      }
      this[_prepareForNextFrame]();
    }
    [_controlFrameEnd]() {
      switch (this[_opcode]) {
        case 8:
        {
          this.closeCode = 1005;
          let payload = this[_payload].takeBytes();
          if (payload[$isNotEmpty]) {
            if (payload[$length] === 1) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            this.closeCode = (payload[$_get](0) << 8 | payload[$_get](1)) >>> 0;
            if (this.closeCode === 1005) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            if (payload[$length] > 2) {
              this.closeReason = convert.utf8.decode(payload[$sublist](2));
            }
          }
          this[_state] = 5;
          dart.nullCheck(this[_eventSink]).close();
          break;
        }
        case 9:
        {
          dart.nullCheck(this[_eventSink]).add(new web_socket_impl._WebSocketPing.new(this[_payload].takeBytes()));
          break;
        }
        case 10:
        {
          dart.nullCheck(this[_eventSink]).add(new web_socket_impl._WebSocketPong.new(this[_payload].takeBytes()));
          break;
        }
      }
      this[_prepareForNextFrame]();
    }
    [_isControlFrame]() {
      return this[_opcode] === 8 || this[_opcode] === 9 || this[_opcode] === 10;
    }
    [_prepareForNextFrame]() {
      if (this[_state] !== 5 && this[_state] !== 6) this[_state] = 0;
      this[_fin] = false;
      this[_opcode] = -1;
      this[_len] = -1;
      this[_remainingLenBytes] = -1;
      this[_remainingMaskingKeyBytes] = 4;
      this[_remainingPayloadBytes] = -1;
      this[_unmaskingIndex] = 0;
    }
  };
  (web_socket_impl._WebSocketProtocolTransformer.new = function(_serverSide = false) {
    this[_state] = 0;
    this[_fin] = false;
    this[_opcode] = -1;
    this[_len] = -1;
    this[_masked] = false;
    this[_remainingLenBytes] = -1;
    this[_remainingMaskingKeyBytes] = 4;
    this[_remainingPayloadBytes] = -1;
    this[_unmaskingIndex] = 0;
    this[_currentMessageType] = 0;
    this.closeCode = 1005;
    this.closeReason = "";
    this[_eventSink] = null;
    this[_maskingBytes] = T.ListOfint().filled(4, 0);
    this[_payload] = _internal.BytesBuilder.new({copy: false});
    this[_serverSide$] = _serverSide;
    web_socket_impl._WebSocketProtocolTransformer.__proto__.new.call(this);
    ;
  }).prototype = web_socket_impl._WebSocketProtocolTransformer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketProtocolTransformer);
  dart.addTypeCaches(web_socket_impl._WebSocketProtocolTransformer);
  web_socket_impl._WebSocketProtocolTransformer[dart.implements] = () => [async.EventSink$(core.List$(core.int))];
  dart.setMethodSignature(web_socket_impl._WebSocketProtocolTransformer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketProtocolTransformer.__proto__),
    bind: dart.fnType(async.Stream, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    [_unmask]: dart.fnType(dart.void, [core.int, core.int, typed_data.Uint8List]),
    [_lengthDone]: dart.fnType(dart.void, []),
    [_maskDone]: dart.fnType(dart.void, []),
    [_startPayload]: dart.fnType(dart.void, []),
    [_messageFrameEnd]: dart.fnType(dart.void, []),
    [_controlFrameEnd]: dart.fnType(dart.void, []),
    [_isControlFrame]: dart.fnType(core.bool, []),
    [_prepareForNextFrame]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketProtocolTransformer, I[0]);
  dart.setFieldSignature(web_socket_impl._WebSocketProtocolTransformer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketProtocolTransformer.__proto__),
    [_state]: dart.fieldType(core.int),
    [_fin]: dart.fieldType(core.bool),
    [_opcode]: dart.fieldType(core.int),
    [_len]: dart.fieldType(core.int),
    [_masked]: dart.fieldType(core.bool),
    [_remainingLenBytes]: dart.fieldType(core.int),
    [_remainingMaskingKeyBytes]: dart.fieldType(core.int),
    [_remainingPayloadBytes]: dart.fieldType(core.int),
    [_unmaskingIndex]: dart.fieldType(core.int),
    [_currentMessageType]: dart.fieldType(core.int),
    closeCode: dart.fieldType(core.int),
    closeReason: dart.fieldType(core.String),
    [_eventSink]: dart.fieldType(dart.nullable(async.EventSink)),
    [_serverSide$]: dart.finalFieldType(core.bool),
    [_maskingBytes]: dart.finalFieldType(core.List$(core.int)),
    [_payload]: dart.finalFieldType(_internal.BytesBuilder)
  }));
  dart.defineLazy(web_socket_impl._WebSocketProtocolTransformer, {
    /*web_socket_impl._WebSocketProtocolTransformer.START*/get START() {
      return 0;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.LEN_FIRST*/get LEN_FIRST() {
      return 1;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.LEN_REST*/get LEN_REST() {
      return 2;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.MASK*/get MASK() {
      return 3;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.PAYLOAD*/get PAYLOAD() {
      return 4;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.CLOSED*/get CLOSED() {
      return 5;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.FAILURE*/get FAILURE() {
      return 6;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.FIN*/get FIN() {
      return 128;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV1*/get RSV1() {
      return 64;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV2*/get RSV2() {
      return 32;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV3*/get RSV3() {
      return 16;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.OPCODE*/get OPCODE() {
      return 15;
    }
  }, false);
  web_socket_impl._WebSocketPing = class _WebSocketPing extends core.Object {};
  (web_socket_impl._WebSocketPing.new = function(payload = null) {
    this.payload = payload;
    ;
  }).prototype = web_socket_impl._WebSocketPing.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketPing);
  dart.addTypeCaches(web_socket_impl._WebSocketPing);
  dart.setLibraryUri(web_socket_impl._WebSocketPing, I[0]);
  dart.setFieldSignature(web_socket_impl._WebSocketPing, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketPing.__proto__),
    payload: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  web_socket_impl._WebSocketPong = class _WebSocketPong extends core.Object {};
  (web_socket_impl._WebSocketPong.new = function(payload = null) {
    this.payload = payload;
    ;
  }).prototype = web_socket_impl._WebSocketPong.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketPong);
  dart.addTypeCaches(web_socket_impl._WebSocketPong);
  dart.setLibraryUri(web_socket_impl._WebSocketPong, I[0]);
  dart.setFieldSignature(web_socket_impl._WebSocketPong, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketPong.__proto__),
    payload: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  var _outCloseCode = dart.privateName(web_socket_impl, "_outCloseCode");
  var _outCloseReason = dart.privateName(web_socket_impl, "_outCloseReason");
  web_socket_impl._WebSocketOutgoingTransformer = class _WebSocketOutgoingTransformer extends async.StreamTransformerBase$(dart.dynamic, core.List$(core.int)) {
    bind(stream) {
      async.Stream.as(stream);
      return T.StreamOfListOfint().eventTransformed(stream, dart.fn(eventSink => {
        if (this[_eventSink] != null) {
          dart.throw(new core.StateError.new("WebSocket transformer already used"));
        }
        this[_eventSink] = eventSink;
        return this;
      }, T.EventSinkOfListOfintTo_WebSocketOutgoingTransformer()));
    }
    add(message) {
      if (web_socket_impl._WebSocketPong.is(message)) {
        this.addFrame(10, message.payload);
        return;
      }
      if (web_socket_impl._WebSocketPing.is(message)) {
        this.addFrame(9, message.payload);
        return;
      }
      let data = null;
      let opcode = null;
      if (message != null) {
        if (typeof message == 'string') {
          opcode = 1;
          data = convert.utf8.encode(message);
        } else if (T.ListOfint().is(message)) {
          opcode = 2;
          data = message;
        } else {
          dart.throw(new core.ArgumentError.new(message));
        }
      } else {
        opcode = 1;
      }
      this.addFrame(opcode, data);
    }
    addError(error, stackTrace = null) {
      dart.nullCheck(this[_eventSink]).addError(error, stackTrace);
    }
    close() {
      let code = this.webSocket[_outCloseCode];
      let reason = this.webSocket[_outCloseReason];
      let data = null;
      if (code != null) {
        data = T.JSArrayOfint().of([]);
        data[$add](dart.notNull(code) >> 8 & 255);
        data[$add](dart.notNull(code) & 255);
        if (reason != null) {
          data[$addAll](convert.utf8.encode(reason));
        }
      }
      this.addFrame(8, data);
      dart.nullCheck(this[_eventSink]).close();
    }
    addFrame(opcode, data) {
      web_socket_impl._WebSocketOutgoingTransformer.createFrame(opcode, data, this.webSocket[_serverSide$], false)[$forEach](dart.fn(e => {
        dart.nullCheck(this[_eventSink]).add(e);
      }, T.ListOfintTovoid()));
    }
    static createFrame(opcode, data, serverSide, compressed) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t1, t0$4;
      let mask = !serverSide;
      let dataLength = data == null ? 0 : data[$length];
      let headerSize = mask ? 6 : 2;
      if (dataLength > 65535) {
        headerSize = headerSize + 8;
      } else if (dataLength > 125) {
        headerSize = headerSize + 2;
      }
      let header = _native_typed_data.NativeUint8List.new(headerSize);
      let index = 0;
      let hoc = (128 | (compressed ? 64 : 0) | (opcode & 15) >>> 0) >>> 0;
      header[$_set]((t0 = index, index = t0 + 1, t0), hoc);
      let lengthBytes = 1;
      if (dataLength > 65535) {
        header[$_set]((t0$ = index, index = t0$ + 1, t0$), 127);
        lengthBytes = 8;
      } else if (dataLength > 125) {
        header[$_set]((t0$0 = index, index = t0$0 + 1, t0$0), 126);
        lengthBytes = 2;
      }
      for (let i = 0; i < lengthBytes; i = i + 1) {
        header[$_set]((t0$1 = index, index = t0$1 + 1, t0$1), dataLength[$rightShift]((lengthBytes - 1 - i) * 8) & 255);
      }
      if (mask) {
        t0$2 = 1;
        header[$_set](t0$2, (header[$_get](t0$2) | 1 << 7) >>> 0);
        let maskBytes = T.JSArrayOfint().of([web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256)]);
        header[$setRange](index, index + 4, maskBytes);
        index = index + 4;
        if (data != null) {
          let list = null;
          if (opcode === 1 && typed_data.Uint8List.is(data)) {
            list = data;
          } else {
            if (typed_data.Uint8List.is(data)) {
              list = _native_typed_data.NativeUint8List.fromList(data);
            } else {
              list = _native_typed_data.NativeUint8List.new(data[$length]);
              for (let i = 0; i < data[$length]; i = i + 1) {
                if (data[$_get](i) < 0 || 255 < data[$_get](i)) {
                  dart.throw(new core.ArgumentError.new("List element is not a byte value " + "(value " + dart.str(data[$_get](i)) + " at index " + dart.str(i) + ")"));
                }
                list[$_set](i, data[$_get](i));
              }
            }
          }
          let blockCount = (list[$length] / 16)[$truncate]();
          if (blockCount > 0) {
            let mask = 0;
            for (let i = 3; i >= 0; i = i - 1) {
              mask = (mask << 8 | maskBytes[$_get](i)) >>> 0;
            }
            let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
            let blockBuffer = typed_data.Int32x4List.view(list[$buffer], 0, blockCount);
            for (let i = 0; i < blockBuffer[$length]; i = i + 1) {
              t0$3 = i;
              blockBuffer[$_set](t0$3, blockBuffer[$_get](t0$3)['^'](blockMask));
            }
          }
          for (let i = blockCount * 16; i < list[$length]; i = i + 1) {
            t0$4 = list;
            t1 = i;
            t0$4[$_set](t1, (t0$4[$_get](t1) ^ maskBytes[$_get](i & 3)) >>> 0);
          }
          data = list;
        }
      }
      if (!(index === headerSize)) dart.assertFailed(null, I[1], 557, 12, "index == headerSize");
      if (data == null) {
        return T.JSArrayOfListOfint().of([header]);
      } else {
        return T.JSArrayOfListOfint().of([header, data]);
      }
    }
  };
  (web_socket_impl._WebSocketOutgoingTransformer.new = function(webSocket) {
    this[_eventSink] = null;
    this.webSocket = webSocket;
    web_socket_impl._WebSocketOutgoingTransformer.__proto__.new.call(this);
    ;
  }).prototype = web_socket_impl._WebSocketOutgoingTransformer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketOutgoingTransformer);
  dart.addTypeCaches(web_socket_impl._WebSocketOutgoingTransformer);
  web_socket_impl._WebSocketOutgoingTransformer[dart.implements] = () => [async.EventSink];
  dart.setMethodSignature(web_socket_impl._WebSocketOutgoingTransformer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketOutgoingTransformer.__proto__),
    bind: dart.fnType(async.Stream$(core.List$(core.int)), [dart.nullable(core.Object)]),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    close: dart.fnType(dart.void, []),
    addFrame: dart.fnType(dart.void, [core.int, dart.nullable(core.List$(core.int))])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketOutgoingTransformer, I[0]);
  dart.setFieldSignature(web_socket_impl._WebSocketOutgoingTransformer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketOutgoingTransformer.__proto__),
    webSocket: dart.finalFieldType(web_socket_impl.WebSocketImpl),
    [_eventSink]: dart.fieldType(dart.nullable(async.EventSink$(core.List$(core.int))))
  }));
  var _controller = dart.privateName(web_socket_impl, "_controller");
  var _subscription = dart.privateName(web_socket_impl, "_subscription");
  var _issuedPause = dart.privateName(web_socket_impl, "_issuedPause");
  var _closed = dart.privateName(web_socket_impl, "_closed");
  var _closeCompleter = dart.privateName(web_socket_impl, "_closeCompleter");
  var _completer = dart.privateName(web_socket_impl, "_completer");
  var _onListen = dart.privateName(web_socket_impl, "_onListen");
  var _onPause = dart.privateName(web_socket_impl, "_onPause");
  var _onResume = dart.privateName(web_socket_impl, "_onResume");
  var _cancel = dart.privateName(web_socket_impl, "_cancel");
  var _done = dart.privateName(web_socket_impl, "_done");
  var _ensureController = dart.privateName(web_socket_impl, "_ensureController");
  web_socket_impl._WebSocketConsumer = class _WebSocketConsumer extends core.Object {
    [_onListen]() {
      if (this[_subscription] != null) {
        dart.nullCheck(this[_subscription]).cancel();
      }
    }
    [_onPause]() {
      if (this[_subscription] != null) {
        dart.nullCheck(this[_subscription]).pause();
      } else {
        this[_issuedPause] = true;
      }
    }
    [_onResume]() {
      if (this[_subscription] != null) {
        dart.nullCheck(this[_subscription]).resume();
      } else {
        this[_issuedPause] = false;
      }
    }
    [_cancel]() {
      if (this[_subscription] != null) {
        let subscription = this[_subscription];
        this[_subscription] = null;
        dart.nullCheck(subscription).cancel();
      }
    }
    [_ensureController]() {
      if (this[_controller] != null) return;
      this[_controller] = async.StreamController.new({sync: true, onPause: dart.bind(this, _onPause), onResume: dart.bind(this, _onResume), onCancel: dart.bind(this, _onListen)});
      let stream = new web_socket_impl._WebSocketOutgoingTransformer.new(this.webSocket).bind(dart.nullCheck(this[_controller]).stream);
      this.sink.addStream(stream).then(core.Null, dart.fn(_ => {
        this[_done]();
        this[_closeCompleter].complete(this.webSocket);
      }, T.dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
          this[_closed] = true;
          this[_cancel]();
          if (core.ArgumentError.is(error)) {
            if (!this[_done](error, stackTrace)) {
              this[_closeCompleter].completeError(error, stackTrace);
            }
          } else {
            this[_done]();
            this[_closeCompleter].complete(this.webSocket);
          }
        }, T.dynamicAndStackTraceToNull())});
    }
    [_done](error = null, stackTrace = null) {
      if (this[_completer] == null) return false;
      if (error != null) {
        dart.nullCheck(this[_completer]).completeError(error, stackTrace);
      } else {
        dart.nullCheck(this[_completer]).complete(this.webSocket);
      }
      this[_completer] = null;
      return true;
    }
    addStream(stream) {
      async.Stream.as(stream);
      if (this[_closed]) {
        stream.listen(null).cancel();
        return async.Future.value(this.webSocket);
      }
      this[_ensureController]();
      this[_completer] = T.CompleterOfWebSocketImpl().new();
      this[_subscription] = stream.listen(dart.fn(data => {
        dart.nullCheck(this[_controller]).add(data);
      }, T.dynamicTovoid()), {onDone: dart.bind(this, _done), onError: dart.bind(this, _done), cancelOnError: true});
      if (this[_issuedPause]) {
        dart.nullCheck(this[_subscription]).pause();
        this[_issuedPause] = false;
      }
      return dart.nullCheck(this[_completer]).future;
    }
    close() {
      this[_ensureController]();
      const closeSocket = () => {
        return this.sink.close().catchError(dart.fn(_ => {
        }, T.dynamicToNull())).then(dart.dynamic, dart.fn(_ => this.webSocket, T.dynamicToWebSocketImpl()));
      };
      dart.fn(closeSocket, T.VoidToFuture());
      dart.nullCheck(this[_controller]).close();
      return this[_closeCompleter].future.then(dart.dynamic, dart.fn(_ => closeSocket(), T.dynamicToFuture()));
    }
    add(data) {
      if (this[_closed]) return;
      this[_ensureController]();
      dart.nullCheck(this[_controller]).add(data);
    }
    closeSocket() {
      this[_closed] = true;
      this[_cancel]();
      this.close();
    }
  };
  (web_socket_impl._WebSocketConsumer.new = function(webSocket, sink) {
    this[_controller] = null;
    this[_subscription] = null;
    this[_issuedPause] = false;
    this[_closed] = false;
    this[_closeCompleter] = T.CompleterOfWebSocketImpl().new();
    this[_completer] = null;
    this.webSocket = webSocket;
    this.sink = sink;
    ;
  }).prototype = web_socket_impl._WebSocketConsumer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketConsumer);
  dart.addTypeCaches(web_socket_impl._WebSocketConsumer);
  web_socket_impl._WebSocketConsumer[dart.implements] = () => [async.StreamConsumer];
  dart.setMethodSignature(web_socket_impl._WebSocketConsumer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketConsumer.__proto__),
    [_onListen]: dart.fnType(dart.void, []),
    [_onPause]: dart.fnType(dart.void, []),
    [_onResume]: dart.fnType(dart.void, []),
    [_cancel]: dart.fnType(dart.void, []),
    [_ensureController]: dart.fnType(dart.void, []),
    [_done]: dart.fnType(core.bool, [], [dart.nullable(core.Object), dart.nullable(core.StackTrace)]),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
    close: dart.fnType(async.Future, []),
    add: dart.fnType(dart.void, [dart.dynamic]),
    closeSocket: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketConsumer, I[0]);
  dart.setFieldSignature(web_socket_impl._WebSocketConsumer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketConsumer.__proto__),
    webSocket: dart.finalFieldType(web_socket_impl.WebSocketImpl),
    sink: dart.finalFieldType(async.StreamSink$(core.List$(core.int))),
    [_controller]: dart.fieldType(dart.nullable(async.StreamController)),
    [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription)),
    [_issuedPause]: dart.fieldType(core.bool),
    [_closed]: dart.fieldType(core.bool),
    [_closeCompleter]: dart.finalFieldType(async.Completer),
    [_completer]: dart.fieldType(dart.nullable(async.Completer$(web_socket_impl.WebSocketImpl)))
  }));
  var protocol$ = dart.privateName(web_socket_impl, "WebSocketImpl.protocol");
  var __WebSocketImpl__controller = dart.privateName(web_socket_impl, "_#WebSocketImpl#_controller");
  var __WebSocketImpl__sink = dart.privateName(web_socket_impl, "_#WebSocketImpl#_sink");
  var _readyState = dart.privateName(web_socket_impl, "_readyState");
  var _writeClosed = dart.privateName(web_socket_impl, "_writeClosed");
  var _closeCode = dart.privateName(web_socket_impl, "_closeCode");
  var _closeReason = dart.privateName(web_socket_impl, "_closeReason");
  var _pingInterval = dart.privateName(web_socket_impl, "_pingInterval");
  var _pingTimer = dart.privateName(web_socket_impl, "_pingTimer");
  var __WebSocketImpl__consumer = dart.privateName(web_socket_impl, "_#WebSocketImpl#_consumer");
  var _closeTimer = dart.privateName(web_socket_impl, "_closeTimer");
  var _consumer = dart.privateName(web_socket_impl, "_consumer");
  var _sink = dart.privateName(web_socket_impl, "_sink");
  var _close = dart.privateName(web_socket_impl, "_close");
  var _serviceId = dart.privateName(web_socket_impl, "_serviceId");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var __serviceId = dart.privateName(web_socket_impl, "_ServiceObject.__serviceId");
  var __serviceId$ = dart.privateName(web_socket_impl, "__serviceId");
  web_socket_impl._ServiceObject = class _ServiceObject extends core.Object {
    get [__serviceId$]() {
      return this[__serviceId];
    }
    set [__serviceId$](value) {
      this[__serviceId] = value;
    }
    get [_serviceId]() {
      let t3;
      if (this[__serviceId$] === 0) this[__serviceId$] = (t3 = web_socket_impl._nextServiceId, web_socket_impl._nextServiceId = t3 + 1, t3);
      return this[__serviceId$];
    }
  };
  (web_socket_impl._ServiceObject.new = function() {
    this[__serviceId] = 0;
    ;
  }).prototype = web_socket_impl._ServiceObject.prototype;
  dart.addTypeTests(web_socket_impl._ServiceObject);
  dart.addTypeCaches(web_socket_impl._ServiceObject);
  dart.setGetterSignature(web_socket_impl._ServiceObject, () => ({
    __proto__: dart.getGetters(web_socket_impl._ServiceObject.__proto__),
    [_serviceId]: core.int
  }));
  dart.setLibraryUri(web_socket_impl._ServiceObject, I[0]);
  dart.setFieldSignature(web_socket_impl._ServiceObject, () => ({
    __proto__: dart.getFields(web_socket_impl._ServiceObject.__proto__),
    [__serviceId$]: dart.fieldType(core.int)
  }));
  const Stream__ServiceObject$36 = class Stream__ServiceObject extends async.Stream {};
  (Stream__ServiceObject$36.new = function() {
    web_socket_impl._ServiceObject.new.call(this);
    Stream__ServiceObject$36.__proto__.new.call(this);
  }).prototype = Stream__ServiceObject$36.prototype;
  (Stream__ServiceObject$36._internal = function() {
    web_socket_impl._ServiceObject.new.call(this);
    Stream__ServiceObject$36.__proto__._internal.call(this);
  }).prototype = Stream__ServiceObject$36.prototype;
  dart.applyMixin(Stream__ServiceObject$36, web_socket_impl._ServiceObject);
  web_socket_impl.WebSocketImpl = class WebSocketImpl extends Stream__ServiceObject$36 {
    get protocol() {
      return this[protocol$];
    }
    set protocol(value) {
      super.protocol = value;
    }
    get [_controller]() {
      let t0;
      t0 = this[__WebSocketImpl__controller];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("_controller")) : t0;
    }
    set [_controller](t0) {
      if (this[__WebSocketImpl__controller] == null)
        this[__WebSocketImpl__controller] = t0;
      else
        dart.throw(new _internal.LateError.fieldAI("_controller"));
    }
    get [_sink]() {
      let t1;
      t1 = this[__WebSocketImpl__sink];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("_sink")) : t1;
    }
    set [_sink](t1) {
      if (this[__WebSocketImpl__sink] == null)
        this[__WebSocketImpl__sink] = t1;
      else
        dart.throw(new _internal.LateError.fieldAI("_sink"));
    }
    get [_consumer]() {
      let t2;
      t2 = this[__WebSocketImpl__consumer];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("_consumer")) : t2;
    }
    set [_consumer](t2) {
      if (this[__WebSocketImpl__consumer] == null)
        this[__WebSocketImpl__consumer] = t2;
      else
        dart.throw(new _internal.LateError.fieldAI("_consumer"));
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    get pingInterval() {
      return this[_pingInterval];
    }
    set pingInterval(interval) {
      if (this[_writeClosed]) return;
      if (this[_pingTimer] != null) dart.nullCheck(this[_pingTimer]).cancel();
      this[_pingInterval] = interval;
      if (this[_pingInterval] == null) return;
      this[_pingTimer] = async.Timer.new(dart.nullCheck(this[_pingInterval]), dart.fn(() => {
        if (this[_writeClosed]) return;
        this[_consumer].add(new web_socket_impl._WebSocketPing.new());
        this[_pingTimer] = async.Timer.new(dart.nullCheck(this[_pingInterval]), dart.fn(() => {
          this[_close](1001);
        }, T.VoidTovoid()));
      }, T.VoidTovoid()));
    }
    get readyState() {
      return this[_readyState];
    }
    get extensions() {
      return null;
    }
    get closeCode() {
      return this[_closeCode];
    }
    get closeReason() {
      return this[_closeReason];
    }
    add(data) {
      this[_sink].add(data);
    }
    addError(error, stackTrace = null) {
      this[_sink].addError(error, stackTrace);
    }
    addStream(stream) {
      async.Stream.as(stream);
      return this[_sink].addStream(stream);
    }
    get done() {
      return this[_sink].done;
    }
    close(code = null, reason = null) {
      if (web_socket_impl.WebSocketImpl._isReservedStatusCode(code)) {
        dart.throw(new exception.WebSocketChannelException.new("Reserved status code " + dart.str(code)));
      }
      if (this[_outCloseCode] == null) {
        this[_outCloseCode] = code;
        this[_outCloseReason] = reason;
      }
      if (!this[_controller].isClosed) {
        if (!this[_controller].hasListener && this[_subscription] != null) {
          this[_controller].stream.drain(dart.dynamic).catchError(dart.fn(_ => new _js_helper.LinkedMap.new(), T.dynamicToMap()));
        }
        this[_closeTimer] == null ? this[_closeTimer] = async.Timer.new(C[0] || CT.C0, dart.fn(() => {
          this[_closeCode] = this[_outCloseCode];
          this[_closeReason] = this[_outCloseReason];
          if (this[_subscription] != null) dart.nullCheck(this[_subscription]).cancel();
          this[_controller].close();
          web_socket_impl.WebSocketImpl._webSockets[$remove](this[_serviceId]);
        }, T.VoidTovoid())) : null;
      }
      return this[_sink].close();
    }
    [_close](code = null, reason = null) {
      if (this[_writeClosed]) return;
      if (this[_outCloseCode] == null) {
        this[_outCloseCode] = code;
        this[_outCloseReason] = reason;
      }
      this[_writeClosed] = true;
      this[_consumer].closeSocket();
      web_socket_impl.WebSocketImpl._webSockets[$remove](this[_serviceId]);
    }
    static _isReservedStatusCode(code) {
      return code != null && (dart.notNull(code) < 1000 || code === 1004 || code === 1005 || code === 1006 || dart.notNull(code) > 1011 && dart.notNull(code) < 1015 || dart.notNull(code) >= 1015 && dart.notNull(code) < 3000);
    }
  };
  (web_socket_impl.WebSocketImpl.fromSocket = function(stream, sink, protocol, _serverSide = false) {
    this[__WebSocketImpl__controller] = null;
    this[_subscription] = null;
    this[__WebSocketImpl__sink] = null;
    this[_readyState] = 0;
    this[_writeClosed] = false;
    this[_closeCode] = null;
    this[_closeReason] = null;
    this[_pingInterval] = null;
    this[_pingTimer] = null;
    this[__WebSocketImpl__consumer] = null;
    this[_outCloseCode] = null;
    this[_outCloseReason] = null;
    this[_closeTimer] = null;
    this[protocol$] = protocol;
    this[_serverSide$] = _serverSide;
    web_socket_impl.WebSocketImpl.__proto__.new.call(this);
    this[_consumer] = new web_socket_impl._WebSocketConsumer.new(this, sink);
    this[_sink] = new io_sink.StreamSinkImpl.new(this[_consumer]);
    this[_readyState] = 1;
    let transformer = new web_socket_impl._WebSocketProtocolTransformer.new(this[_serverSide$]);
    this[_subscription] = transformer.bind(stream).listen(dart.fn(data => {
      if (web_socket_impl._WebSocketPing.is(data)) {
        if (!this[_writeClosed]) this[_consumer].add(new web_socket_impl._WebSocketPong.new(data.payload));
      } else if (web_socket_impl._WebSocketPong.is(data)) {
        this.pingInterval = this[_pingInterval];
      } else {
        this[_controller].add(data);
      }
    }, T.dynamicTovoid()), {onError: dart.fn((error, stackTrace) => {
        if (this[_closeTimer] != null) dart.nullCheck(this[_closeTimer]).cancel();
        if (core.FormatException.is(error)) {
          this[_close](1007);
        } else {
          this[_close](1002);
        }
        this[_closeCode] = this[_outCloseCode];
        this[_closeReason] = this[_outCloseReason];
        this[_controller].close();
      }, T.dynamicAnddynamicToNull()), onDone: dart.fn(() => {
        if (this[_closeTimer] != null) dart.nullCheck(this[_closeTimer]).cancel();
        if (this[_readyState] === 1) {
          this[_readyState] = 2;
          if (!web_socket_impl.WebSocketImpl._isReservedStatusCode(transformer.closeCode)) {
            this[_close](transformer.closeCode, transformer.closeReason);
          } else {
            this[_close]();
          }
          this[_readyState] = 3;
        }
        this[_closeCode] = transformer.closeCode;
        this[_closeReason] = transformer.closeReason;
        this[_controller].close();
      }, T.VoidTovoid()), cancelOnError: true});
    dart.nullCheck(this[_subscription]).pause();
    this[_controller] = async.StreamController.new({sync: true, onListen: dart.fn(() => dart.nullCheck(this[_subscription]).resume(), T.VoidTovoid()), onCancel: dart.fn(() => {
        dart.nullCheck(this[_subscription]).cancel();
        this[_subscription] = null;
      }, T.VoidToNull()), onPause: dart.bind(dart.nullCheck(this[_subscription]), 'pause'), onResume: dart.bind(dart.nullCheck(this[_subscription]), 'resume')});
    web_socket_impl.WebSocketImpl._webSockets[$_set](this[_serviceId], this);
  }).prototype = web_socket_impl.WebSocketImpl.prototype;
  dart.addTypeTests(web_socket_impl.WebSocketImpl);
  dart.addTypeCaches(web_socket_impl.WebSocketImpl);
  web_socket_impl.WebSocketImpl[dart.implements] = () => [async.StreamSink];
  dart.setMethodSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getMethods(web_socket_impl.WebSocketImpl.__proto__),
    listen: dart.fnType(async.StreamSubscription, [dart.nullable(dart.fnType(dart.void, [dart.dynamic]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {}),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    addStream: dart.fnType(async.Future, [dart.nullable(core.Object)]),
    close: dart.fnType(async.Future, [], [dart.nullable(core.int), dart.nullable(core.String)]),
    [_close]: dart.fnType(dart.void, [], [dart.nullable(core.int), dart.nullable(core.String)])
  }));
  dart.setGetterSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getGetters(web_socket_impl.WebSocketImpl.__proto__),
    [_controller]: async.StreamController,
    [_sink]: async.StreamSink,
    [_consumer]: web_socket_impl._WebSocketConsumer,
    pingInterval: dart.nullable(core.Duration),
    readyState: core.int,
    extensions: dart.nullable(core.String),
    closeCode: dart.nullable(core.int),
    closeReason: dart.nullable(core.String),
    done: async.Future
  }));
  dart.setSetterSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getSetters(web_socket_impl.WebSocketImpl.__proto__),
    [_controller]: async.StreamController,
    [_sink]: async.StreamSink,
    [_consumer]: web_socket_impl._WebSocketConsumer,
    pingInterval: dart.nullable(core.Duration)
  }));
  dart.setLibraryUri(web_socket_impl.WebSocketImpl, I[0]);
  dart.setFieldSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getFields(web_socket_impl.WebSocketImpl.__proto__),
    protocol: dart.finalFieldType(dart.nullable(core.String)),
    [__WebSocketImpl__controller]: dart.fieldType(dart.nullable(async.StreamController)),
    [_subscription]: dart.fieldType(dart.nullable(async.StreamSubscription)),
    [__WebSocketImpl__sink]: dart.fieldType(dart.nullable(async.StreamSink)),
    [_serverSide$]: dart.finalFieldType(core.bool),
    [_readyState]: dart.fieldType(core.int),
    [_writeClosed]: dart.fieldType(core.bool),
    [_closeCode]: dart.fieldType(dart.nullable(core.int)),
    [_closeReason]: dart.fieldType(dart.nullable(core.String)),
    [_pingInterval]: dart.fieldType(dart.nullable(core.Duration)),
    [_pingTimer]: dart.fieldType(dart.nullable(async.Timer)),
    [__WebSocketImpl__consumer]: dart.fieldType(dart.nullable(web_socket_impl._WebSocketConsumer)),
    [_outCloseCode]: dart.fieldType(dart.nullable(core.int)),
    [_outCloseReason]: dart.fieldType(dart.nullable(core.String)),
    [_closeTimer]: dart.fieldType(dart.nullable(async.Timer))
  }));
  dart.defineLazy(web_socket_impl.WebSocketImpl, {
    /*web_socket_impl.WebSocketImpl._webSockets*/get _webSockets() {
      return new (T.IdentityMapOfint$WebSocketImpl()).new();
    },
    /*web_socket_impl.WebSocketImpl.DEFAULT_WINDOW_BITS*/get DEFAULT_WINDOW_BITS() {
      return 15;
    },
    /*web_socket_impl.WebSocketImpl.PER_MESSAGE_DEFLATE*/get PER_MESSAGE_DEFLATE() {
      return "permessage-deflate";
    }
  }, false);
  dart.defineLazy(web_socket_impl, {
    /*web_socket_impl.webSocketGUID*/get webSocketGUID() {
      return "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    },
    /*web_socket_impl._random*/get _random() {
      return math.Random.new();
    },
    /*web_socket_impl._nextServiceId*/get _nextServiceId() {
      return 1;
    },
    set _nextServiceId(_) {}
  }, false);
  var message$ = dart.privateName(exception, "WebSocketChannelException.message");
  var inner$ = dart.privateName(exception, "WebSocketChannelException.inner");
  exception.WebSocketChannelException = class WebSocketChannelException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get inner() {
      return this[inner$];
    }
    set inner(value) {
      super.inner = value;
    }
    toString() {
      return this.message == null ? "WebSocketChannelException" : "WebSocketChannelException: " + dart.str(this.message);
    }
  };
  (exception.WebSocketChannelException.new = function(message = null) {
    this[message$] = message;
    this[inner$] = null;
    ;
  }).prototype = exception.WebSocketChannelException.prototype;
  (exception.WebSocketChannelException.from = function(inner) {
    this[inner$] = inner;
    this[message$] = dart.toString(inner);
    ;
  }).prototype = exception.WebSocketChannelException.prototype;
  dart.addTypeTests(exception.WebSocketChannelException);
  dart.addTypeCaches(exception.WebSocketChannelException);
  exception.WebSocketChannelException[dart.implements] = () => [core.Exception];
  dart.setLibraryUri(exception.WebSocketChannelException, I[2]);
  dart.setFieldSignature(exception.WebSocketChannelException, () => ({
    __proto__: dart.getFields(exception.WebSocketChannelException.__proto__),
    message: dart.finalFieldType(dart.nullable(core.String)),
    inner: dart.finalFieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(exception.WebSocketChannelException, ['toString']);
  var _webSocket$ = dart.privateName(html$, "HtmlWebSocketChannel._webSocket");
  var _closeCode$ = dart.privateName(html$, "_closeCode");
  var _closeReason$ = dart.privateName(html$, "_closeReason");
  var _localCloseCode = dart.privateName(html$, "_localCloseCode");
  var _localCloseReason = dart.privateName(html$, "_localCloseReason");
  var _controller$ = dart.privateName(html$, "_controller");
  var __HtmlWebSocketChannel_sink = dart.privateName(html$, "_#HtmlWebSocketChannel#sink");
  var _webSocket$0 = dart.privateName(html$, "_webSocket");
  var _listen = dart.privateName(html$, "_listen");
  var _webSocket = dart.privateName(channel, "_webSocket");
  html$.HtmlWebSocketChannel = class HtmlWebSocketChannel extends stream_channel.StreamChannelMixin {
    get [_webSocket$0]() {
      return this[_webSocket$];
    }
    set [_webSocket$0](value) {
      super[_webSocket$0] = value;
    }
    get protocol() {
      return this[_webSocket$0].protocol;
    }
    get closeCode() {
      return this[_closeCode$];
    }
    get closeReason() {
      return this[_closeReason$];
    }
    get bufferedAmount() {
      return this[_webSocket$0].bufferedAmount;
    }
    get stream() {
      return this[_controller$].foreign.stream;
    }
    get sink() {
      let t4, t3;
      t3 = this[__HtmlWebSocketChannel_sink];
      return t3 == null ? (t4 = new html$._HtmlWebSocketSink.new(this), this[__HtmlWebSocketChannel_sink] == null ? this[__HtmlWebSocketChannel_sink] = t4 : dart.throw(new _internal.LateError.fieldADI("sink"))) : t3;
    }
    [_listen]() {
      this[_controller$].local.stream.listen(dart.bind(this[_webSocket$0], 'send'), {onDone: dart.fn(() => {
          if (this[_localCloseCode] != null && this[_localCloseReason] != null) {
            this[_webSocket$0].close(this[_localCloseCode], this[_localCloseReason]);
          } else if (this[_localCloseCode] != null) {
            this[_webSocket$0].close(this[_localCloseCode]);
          } else {
            this[_webSocket$0].close();
          }
        }, T.VoidTovoid())});
    }
    get [_webSocket]() {
      return web_socket_impl.WebSocketImpl.as(this[$noSuchMethod](new core._Invocation.getter(C[1] || CT.C1)));
    }
  };
  (html$.HtmlWebSocketChannel.connect = function(url, opts) {
    let t4, t3;
    let protocols = opts && 'protocols' in opts ? opts.protocols : null;
    let binaryType = opts && 'binaryType' in opts ? opts.binaryType : null;
    html$.HtmlWebSocketChannel.new.call(this, (t3 = html.WebSocket.new(dart.toString(url), protocols), (() => {
      t3.binaryType = (t4 = binaryType, t4 == null ? html$.BinaryType.list : t4).value;
      return t3;
    })()));
  }).prototype = html$.HtmlWebSocketChannel.prototype;
  (html$.HtmlWebSocketChannel.new = function(_webSocket) {
    this[_closeCode$] = null;
    this[_closeReason$] = null;
    this[_localCloseCode] = null;
    this[_localCloseReason] = null;
    this[_controller$] = new stream_channel_controller.StreamChannelController.new({sync: true, allowForeignErrors: false});
    this[__HtmlWebSocketChannel_sink] = null;
    this[_webSocket$] = _webSocket;
    if (this[_webSocket$0][$readyState] === 1) {
      this[_listen]();
    } else {
      this[_webSocket$0][$onOpen].first.then(core.Null, dart.fn(_ => {
        this[_listen]();
      }, T.EventToNull()));
    }
    this[_webSocket$0][$onError].first.then(core.Null, dart.fn(_ => {
      this[_controller$].local.sink.addError(new exception.WebSocketChannelException.new("WebSocket connection failed."));
      this[_controller$].local.sink.close();
    }, T.EventToNull()));
    this[_webSocket$0][$onMessage].listen(dart.fn(event => {
      let data = event[$data];
      if (typed_data.ByteBuffer.is(data)) data = data[$asUint8List]();
      this[_controller$].local.sink.add(data);
    }, T.MessageEventTovoid()));
    this[_webSocket$0][$onClose].first.then(core.Null, dart.fn(event => {
      this[_closeCode$] = event.code;
      this[_closeReason$] = event.reason;
      this[_controller$].local.sink.close();
    }, T.CloseEventToNull()));
  }).prototype = html$.HtmlWebSocketChannel.prototype;
  dart.addTypeTests(html$.HtmlWebSocketChannel);
  dart.addTypeCaches(html$.HtmlWebSocketChannel);
  html$.HtmlWebSocketChannel[dart.implements] = () => [channel.WebSocketChannel];
  dart.setMethodSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getMethods(html$.HtmlWebSocketChannel.__proto__),
    [_listen]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getGetters(html$.HtmlWebSocketChannel.__proto__),
    protocol: dart.nullable(core.String),
    closeCode: dart.nullable(core.int),
    closeReason: dart.nullable(core.String),
    bufferedAmount: dart.nullable(core.int),
    stream: async.Stream,
    sink: channel.WebSocketSink,
    [_webSocket]: web_socket_impl.WebSocketImpl
  }));
  dart.setLibraryUri(html$.HtmlWebSocketChannel, I[3]);
  dart.setFieldSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getFields(html$.HtmlWebSocketChannel.__proto__),
    [_webSocket$0]: dart.finalFieldType(html.WebSocket),
    [_closeCode$]: dart.fieldType(dart.nullable(core.int)),
    [_closeReason$]: dart.fieldType(dart.nullable(core.String)),
    [_localCloseCode]: dart.fieldType(dart.nullable(core.int)),
    [_localCloseReason]: dart.fieldType(dart.nullable(core.String)),
    [_controller$]: dart.finalFieldType(stream_channel_controller.StreamChannelController),
    [__HtmlWebSocketChannel_sink]: dart.fieldType(dart.nullable(channel.WebSocketSink))
  }));
  var _channel = dart.privateName(html$, "_channel");
  html$._HtmlWebSocketSink = class _HtmlWebSocketSink extends stream_sink.DelegatingStreamSink {
    close(closeCode = null, closeReason = null) {
      this[_channel][_localCloseCode] = closeCode;
      this[_channel][_localCloseReason] = closeReason;
      return super.close();
    }
    get [_webSocket]() {
      return web_socket_impl.WebSocketImpl.as(this[$noSuchMethod](new core._Invocation.getter(C[1] || CT.C1)));
    }
  };
  (html$._HtmlWebSocketSink.new = function(channel) {
    this[_channel] = channel;
    html$._HtmlWebSocketSink.__proto__.new.call(this, channel[_controller$].foreign.sink);
    ;
  }).prototype = html$._HtmlWebSocketSink.prototype;
  dart.addTypeTests(html$._HtmlWebSocketSink);
  dart.addTypeCaches(html$._HtmlWebSocketSink);
  html$._HtmlWebSocketSink[dart.implements] = () => [channel.WebSocketSink];
  dart.setMethodSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getMethods(html$._HtmlWebSocketSink.__proto__),
    close: dart.fnType(async.Future, [], [dart.nullable(core.int), dart.nullable(core.String)])
  }));
  dart.setGetterSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getGetters(html$._HtmlWebSocketSink.__proto__),
    [_webSocket]: web_socket_impl.WebSocketImpl
  }));
  dart.setLibraryUri(html$._HtmlWebSocketSink, I[3]);
  dart.setFieldSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getFields(html$._HtmlWebSocketSink.__proto__),
    [_channel]: dart.finalFieldType(html$.HtmlWebSocketChannel)
  }));
  var name$ = dart.privateName(html$, "BinaryType.name");
  var value$ = dart.privateName(html$, "BinaryType.value");
  html$.BinaryType = class BinaryType extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    toString() {
      return this.name;
    }
  };
  (html$.BinaryType.__ = function(name, value) {
    this[name$] = name;
    this[value$] = value;
    ;
  }).prototype = html$.BinaryType.prototype;
  dart.addTypeTests(html$.BinaryType);
  dart.addTypeCaches(html$.BinaryType);
  dart.setLibraryUri(html$.BinaryType, I[3]);
  dart.setFieldSignature(html$.BinaryType, () => ({
    __proto__: dart.getFields(html$.BinaryType.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(html$.BinaryType, ['toString']);
  dart.defineLazy(html$.BinaryType, {
    /*html$.BinaryType.blob*/get blob() {
      return C[2] || CT.C2;
    },
    /*html$.BinaryType.list*/get list() {
      return C[3] || CT.C3;
    }
  }, false);
  _connect_html.connect = function connect(uri, opts) {
    let protocols = opts && 'protocols' in opts ? opts.protocols : null;
    return new html$.HtmlWebSocketChannel.connect(uri, {protocols: protocols});
  };
  channel.WebSocketChannel = class WebSocketChannel extends stream_channel.StreamChannelMixin {
    get protocol() {
      return this[_webSocket].protocol;
    }
    get closeCode() {
      return this[_webSocket].closeCode;
    }
    get closeReason() {
      return this[_webSocket].closeReason;
    }
    get stream() {
      return new async.StreamView.new(this[_webSocket]);
    }
    get sink() {
      return new channel.WebSocketSink.__(this[_webSocket]);
    }
    static signKey(key) {
      return convert.base64.encode(sha1.sha1.convert((key + web_socket_impl.webSocketGUID)[$codeUnits]).bytes);
    }
    static connect(uri, opts) {
      let protocols = opts && 'protocols' in opts ? opts.protocols : null;
      return _connect_html.connect(uri, {protocols: protocols});
    }
  };
  (channel.WebSocketChannel.new = function(channel, opts) {
    let t3;
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    let pingInterval = opts && 'pingInterval' in opts ? opts.pingInterval : null;
    let serverSide = opts && 'serverSide' in opts ? opts.serverSide : true;
    this[_webSocket] = (t3 = new web_socket_impl.WebSocketImpl.fromSocket(channel.stream, channel.sink, protocol, serverSide), (() => {
      t3.pingInterval = pingInterval;
      return t3;
    })());
    ;
  }).prototype = channel.WebSocketChannel.prototype;
  dart.addTypeTests(channel.WebSocketChannel);
  dart.addTypeCaches(channel.WebSocketChannel);
  dart.setGetterSignature(channel.WebSocketChannel, () => ({
    __proto__: dart.getGetters(channel.WebSocketChannel.__proto__),
    protocol: dart.nullable(core.String),
    closeCode: dart.nullable(core.int),
    closeReason: dart.nullable(core.String),
    stream: async.Stream,
    sink: channel.WebSocketSink
  }));
  dart.setLibraryUri(channel.WebSocketChannel, I[4]);
  dart.setFieldSignature(channel.WebSocketChannel, () => ({
    __proto__: dart.getFields(channel.WebSocketChannel.__proto__),
    [_webSocket]: dart.finalFieldType(web_socket_impl.WebSocketImpl)
  }));
  channel.WebSocketSink = class WebSocketSink extends stream_sink.DelegatingStreamSink {
    close(closeCode = null, closeReason = null) {
      return this[_webSocket].close(closeCode, closeReason);
    }
  };
  (channel.WebSocketSink.__ = function(webSocket) {
    this[_webSocket] = webSocket;
    channel.WebSocketSink.__proto__.new.call(this, webSocket);
    ;
  }).prototype = channel.WebSocketSink.prototype;
  dart.addTypeTests(channel.WebSocketSink);
  dart.addTypeCaches(channel.WebSocketSink);
  dart.setMethodSignature(channel.WebSocketSink, () => ({
    __proto__: dart.getMethods(channel.WebSocketSink.__proto__),
    close: dart.fnType(async.Future, [], [dart.nullable(core.int), dart.nullable(core.String)])
  }));
  dart.setLibraryUri(channel.WebSocketSink, I[4]);
  dart.setFieldSignature(channel.WebSocketSink, () => ({
    __proto__: dart.getFields(channel.WebSocketSink.__proto__),
    [_webSocket]: dart.finalFieldType(web_socket_impl.WebSocketImpl)
  }));
  dart.trackLibraries("packages/web_socket_channel/src/copy/web_socket_impl.dart", {
    "package:web_socket_channel/src/copy/web_socket_impl.dart": web_socket_impl,
    "package:web_socket_channel/src/exception.dart": exception,
    "package:web_socket_channel/html.dart": html$,
    "package:web_socket_channel/src/_connect_html.dart": _connect_html,
    "package:web_socket_channel/src/channel.dart": channel,
    "package:web_socket_channel/web_socket_channel.dart": web_socket_channel
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["web_socket_impl.dart","../exception.dart","../../html.dart","../_connect_html.dart","../channel.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/web_socket_channel/src/copy/web_socket_impl.dart.lib.js"}');
  // Exports:
  return {
    src__copy__web_socket_impl: web_socket_impl,
    src__exception: exception,
    html: html$,
    src___connect_html: _connect_html,
    src__channel: channel,
    web_socket_channel: web_socket_channel
  };
}));

//# sourceMappingURL=web_socket_impl.dart.lib.js.map
